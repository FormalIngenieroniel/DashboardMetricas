import streamlit as st
import pandas as pd
import plotly.express as px
import joblib
import numpy as np
import json

# --- Configuraci√≥n de la P√°gina ---
st.set_page_config(
    page_title="POC: Predicci√≥n de Precios Airbnb",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Cargar Modelo y Extraer Categor√≠as ---
@st.cache_resource
def load_model_and_categories():
    model = None
    dynamic_categories = {}
    try:
        model = joblib.load("modelo_regresion_precio_final.joblib")
    except FileNotFoundError:
        st.error("Error: El archivo 'modelo_regresion_precio_final.joblib' no se encontr√≥.")
        return None, None
    except Exception as e:
        st.error(f"Error al cargar el modelo: {e}")
        return None, None

    if model:
        try:
            preprocessor = model.named_steps.get('preprocessor')
            if not preprocessor:
                st.warning("Paso 'preprocessor' no encontrado en el pipeline del modelo.")
                return model, dynamic_categories

            cat_transformer_tuple = None
            for t_name, t_obj, t_cols in preprocessor.transformers_:
                if t_name == 'cat':
                    cat_transformer_tuple = (t_obj, t_cols)
                    break
            
            if cat_transformer_tuple:
                cat_pipeline_or_encoder, original_cat_cols = cat_transformer_tuple
                ohe = None
                if hasattr(cat_pipeline_or_encoder, 'named_steps'):
                    for step_name in ['onehotencoder', 'one_hot_encoder', 'ohe', 'onehot']:
                        if step_name in cat_pipeline_or_encoder.named_steps:
                            ohe = cat_pipeline_or_encoder.named_steps[step_name]
                            break
                    if not ohe and hasattr(cat_pipeline_or_encoder.steps[-1][1], 'categories_'):
                        ohe = cat_pipeline_or_encoder.steps[-1][1]
                elif hasattr(cat_pipeline_or_encoder, 'categories_'):
                    ohe = cat_pipeline_or_encoder

                if ohe and hasattr(ohe, 'categories_'):
                    if len(original_cat_cols) == len(ohe.categories_):
                        for i, col_name in enumerate(original_cat_cols):
                            categories = ohe.categories_[i]
                            dynamic_categories[col_name] = sorted([str(cat) for cat in categories if pd.notna(cat)])
                    else:
                        st.warning(f"Discrepancia en el n√∫mero de columnas categ√≥ricas ({len(original_cat_cols)}) y las categor√≠as del OHE ({len(ohe.categories_)}).")
                else:
                    st.warning("No se pudo encontrar el OneHotEncoder o sus categor√≠as dentro del pipeline 'cat'.")
            else:
                st.warning("Transformador categ√≥rico ('cat') no encontrado en el preprocesador.")
        except Exception as e:
            st.warning(f"Error al extraer categor√≠as din√°micas del modelo: {e}.")
    
    return model, dynamic_categories

modelo, dynamic_categories = load_model_and_categories()

# --- Valores por defecto para Selectores ---
pais_sector_mapping_default = {
    'Japan': ['Okinawa', 'Tokyo', 'Kyoto', 'Hokkaido'],
    'United States': ['New York', 'California', 'Florida'],
    'Spain': ['Madrid', 'Barcelona', 'Seville'],
    'France': ['Paris', 'Nice', 'Lyon'],
    'Colombia': ['Bogot√° D.C.', 'Medell√≠n', 'Cartagena'],
    'Other': ['OtherSector']
}
default_checkin_options = ['Ma√±ana', 'Tarde', 'Noche', 'Flexible', 'No Definido']
default_checkout_options = ['Ma√±ana', 'Tarde', 'Noche', 'Flexible', 'No Definido']
default_paises = ['Japan', 'United States', 'Spain', 'France', 'Colombia', 'Other']

# --- Funci√≥n para cargar el mapeo pa√≠s-sector desde JSON ---
@st.cache_resource
def load_pais_sector_mapping_from_file(filepath="pais_sector_mapping.json"):
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            mapping = json.load(f)
        st.success(f"Mapeo pa√≠s-sector cargado exitosamente desde '{filepath}'.")
        return mapping
    except FileNotFoundError:
        st.error(f"Error: El archivo '{filepath}' no se encontr√≥. Se usar√°n los valores por defecto.")
        return pais_sector_mapping_default
    except json.JSONDecodeError:
        st.error(f"Error: El archivo '{filepath}' no es un JSON v√°lido. Se usar√°n los valores por defecto.")
        return pais_sector_mapping_default
    except Exception as e:
        st.error(f"Error desconocido al cargar '{filepath}': {e}. Se usar√°n los valores por defecto.")
        return pais_sector_mapping_default

if 'pais_sector_mapping' not in st.session_state:
    st.session_state.pais_sector_mapping = load_pais_sector_mapping_from_file()

# --- T√≠tulo Principal y Descripci√≥n del Problema ---
st.title("üè† POC: Sistema Inteligente de Evaluaci√≥n de Rentabilidad para Airbnb")
st.markdown("""
El objetivo de este dashboard es presentar una **Prueba de Concepto (POC)** de c√≥mo un modelo de Machine Learning
puede solucionar la necesidad de evaluar la rentabilidad y el potencial de mejora de propiedades en Airbnb.
""")
st.markdown("""
---
### El Desaf√≠o:
Una empresa de inversi√≥n inmobiliaria, junto con propietarios independientes, busca maximizar el rendimiento econ√≥mico de propiedades listadas (o por listar) en plataformas como Airbnb. Su necesidad principal es contar con una herramienta basada en inteligencia artificial que permita:

* üöÄ **Evaluar si una propiedad es una buena inversi√≥n antes de adquirirla**, prediciendo su precio por noche y compar√°ndolo con los costos estimados.
* üõ†Ô∏è **Simular escenarios de mejora** (remodelaciones, cambios estructurales o de servicios) para estimar c√≥mo esas mejoras afectar√≠an el precio por noche y, por ende, la rentabilidad.
* üí° Tomar **decisiones fundamentadas** tanto antes de la compra como durante la explotaci√≥n del inmueble.

Este sistema de predicci√≥n estima el precio por noche de una propiedad seg√∫n sus caracter√≠sticas (ubicaci√≥n, tama√±o, servicios, etc.), simula el impacto de mejoras y calcula la rentabilidad esperada.
""")
st.markdown("---")

# --- Secci√≥n de Confiabilidad del Modelo ---
st.header("üìä Confiabilidad del Modelo de Predicci√≥n")
st.markdown("""
Para asegurar la validez de nuestras predicciones, el modelo fue evaluado rigurosamente.
A continuaci√≥n, se presentan las m√©tricas clave y una comparaci√≥n de predicciones contra valores reales.
""")

col1, col2 = st.columns(2)
with col1:
    st.subheader("M√©tricas de Evaluaci√≥n:")
    st.metric(label="MAE Entrenamiento (Error Absoluto Medio)", value="COP {:,.2f}".format(11789.95))
    st.metric(label="R¬≤ Entrenamiento (Coeficiente de Determinaci√≥n)", value="0.58")
with col2:
    st.subheader(" ")
    st.metric(label="MAE Prueba", value="COP {:,.2f}".format(10346.47))
    st.metric(label="R¬≤ Prueba", value="0.65")

st.markdown("""
* **MAE (Mean Absolute Error):** Representa el error promedio de las predicciones. Un MAE de prueba de COP 10,346.47 significa que, en promedio, las predicciones del modelo se desv√≠an este valor del precio real.
* **R¬≤ (R-squared):** Indica la proporci√≥n de la varianza en el precio que es predecible a partir de las caracter√≠sticas. Un R¬≤ de prueba de 0.65 sugiere que el modelo explica el 65% de la variabilidad de los precios.
""")

st.subheader("Comparaci√≥n de Predicciones vs. Valores Reales (Muestra)")
data_comparacion = {
    'Real': [13718, 2853, 16128, 15406, 7980, 8642, 58273, 1747, 10353, 4734],
    'Predicci√≥n': [14699.457549, 3868.607576, 9137.748835, 3291.873266, 7937.131076, 9484.252985, 169251.768205, 9559.487026, 12043.144755, 12611.843768],
    'Error Absoluto': [981.457549, 1015.607576, 6990.251165, 12114.126734, 42.868924, 842.252985, 110978.768205, 7812.487026, 1690.144755, 7877.843768]
}
df_comparacion = pd.DataFrame(data_comparacion)
df_comparacion['Predicci√≥n'] = df_comparacion['Predicci√≥n'].round(2)
df_comparacion['Error Absoluto'] = df_comparacion['Error Absoluto'].round(2)
for col_comp in ['Real', 'Predicci√≥n', 'Error Absoluto']:
    df_comparacion[col_comp] = df_comparacion[col_comp].apply(lambda x: f"COP {x:,.2f}")
st.dataframe(df_comparacion, use_container_width=True)
st.markdown("""
Esta tabla muestra las primeras 10 predicciones del conjunto de prueba. Se observa variabilidad en la precisi√≥n,
lo cual es esperado. Casos como el √≠ndice 6 (error alto) podr√≠an investigarse m√°s a fondo para entender
si son outliers o propiedades con caracter√≠sticas muy inusuales.
""")
st.markdown("---")

# --- Secci√≥n de Predicci√≥n Interactiva y Caracter√≠sticas del Modelo ---
st.header("üîÆ Predicci√≥n Interactiva y Relevancia de Caracter√≠sticas")

col_form, col_importance = st.columns([0.6, 0.4])

with col_form:
    st.subheader("Simula el Precio de una Propiedad")
    st.markdown("Ajusta las caracter√≠sticas de la propiedad base para obtener una estimaci√≥n del precio por noche.")

    default_property_base = {
        'reviews': 50, 'rating': 4.5, 'host_id': 1000, 'studios': 0,
        'bedrooms': 2, 'beds': 3, 'bathrooms': 1, 'guests': 4, 'toiles': 1,
        'checkout_category': 'No Definido', 'checkin_category': 'Ma√±ana',
        'pais': 'Colombia',
        'sector': 'Bogot√° D.C.'
    }

    if st.session_state.pais_sector_mapping and st.session_state.pais_sector_mapping != pais_sector_mapping_default:
        paises_options = sorted(list(st.session_state.pais_sector_mapping.keys()))
    else:
        paises_options = dynamic_categories.get('pais', default_paises) if dynamic_categories else default_paises
        if not paises_options:
             paises_options = default_paises

    if default_property_base['pais'] not in paises_options and paises_options:
        default_property_base['pais'] = paises_options[0]
    elif not paises_options:
        st.warning("No hay pa√≠ses disponibles para seleccionar.")
        paises_options = [default_property_base['pais']]

    checkin_options = dynamic_categories.get('checkin_category', default_checkin_options) if dynamic_categories else default_checkin_options
    checkout_options = dynamic_categories.get('checkout_category', default_checkout_options) if dynamic_categories else default_checkout_options

    st.write("**Detalles de la Propiedad:**")
    c1, c2, c3 = st.columns(3)
    bedrooms_input = c1.slider("Habitaciones (bedrooms)", 0, 10, default_property_base['bedrooms'])
    bathrooms_input = c2.slider("Ba√±os Completos (bathrooms)", 0, 8, default_property_base['bathrooms'])
    beds_input = c3.slider("Camas (beds)", 1, 16, default_property_base['beds'])

    c4, c5, c6 = st.columns(3)
    guests_input = c4.slider("Hu√©spedes Permitidos (guests)", 1, 16, default_property_base['guests'])
    toiles_input = c5.slider("Medios Ba√±os/Aseos (toiles)", 0, 5, default_property_base['toiles'])
    studios_input = c6.selectbox("¬øEs un Estudio? (studios)", [0, 1], index=default_property_base['studios'], format_func=lambda x: "S√≠" if x == 1 else "No")

    st.write("**Ubicaci√≥n y Host:**")
    c7, c8, c9 = st.columns(3)
    
    default_pais_index = paises_options.index(default_property_base['pais']) if default_property_base['pais'] in paises_options else 0
    pais_input = c7.selectbox("Pa√≠s (pais)", paises_options, index=default_pais_index, key="pais_selector")

    sectores_para_pais_seleccionado = []
    if pais_input:
        sectores_para_pais_seleccionado = st.session_state.pais_sector_mapping.get(pais_input, [])

    default_sector_value = None
    if pais_input == default_property_base['pais'] and default_property_base['sector'] in sectores_para_pais_seleccionado:
        default_sector_value = default_property_base['sector']
    elif sectores_para_pais_seleccionado:
        default_sector_value = sectores_para_pais_seleccionado[0]
    
    sector_input = None
    if sectores_para_pais_seleccionado:
        idx_sector = 0
        if default_sector_value and default_sector_value in sectores_para_pais_seleccionado:
            idx_sector = sectores_para_pais_seleccionado.index(default_sector_value)
        
        sector_input = c8.selectbox(
            "Sector/Ciudad (sector)",
            options=sectores_para_pais_seleccionado,
            index=idx_sector
        )
    else:
        c8.info(f"No hay sectores definidos para '{pais_input}' en el mapeo cargado.")

    host_id_input = c9.number_input("ID del Anfitri√≥n (host_id)", value=default_property_base['host_id'], step=1, min_value=0)

    st.write("**Rese√±as y Log√≠stica:**")
    c10, c11, c12_a, c12_b = st.columns(4)
    reviews_input = c10.number_input("N√∫mero de Rese√±as (reviews)", 0, 2000, default_property_base['reviews'])
    rating_input = c11.slider("Calificaci√≥n Promedio (rating)", 0.0, 5.0, default_property_base['rating'], 0.1)

    default_checkin_index = checkin_options.index(default_property_base['checkin_category']) if default_property_base['checkin_category'] in checkin_options else 0
    checkin_input = c12_a.selectbox("Categor√≠a Check-in", checkin_options, index=default_checkin_index)
    
    default_checkout_index = checkout_options.index(default_property_base['checkout_category']) if default_property_base['checkout_category'] in checkout_options else 0
    checkout_input = c12_b.selectbox("Categor√≠a Check-out", checkout_options, index=default_checkout_index, key="checkout_cat_key")

    if st.button("üìà Predecir Precio Base", key="predict_base_interactive", use_container_width=True):
        if modelo:
            if not pais_input:
                st.warning("Por favor, seleccione un pa√≠s.")
            elif not sector_input and sectores_para_pais_seleccionado:
                st.warning(f"Por favor, seleccione un sector para '{pais_input}'.")
            elif not sector_input and not sectores_para_pais_seleccionado:
                 st.error(f"No se puede predecir: El pa√≠s '{pais_input}' no tiene sectores configurados en el mapeo o el mapeo no se carg√≥ correctamente.")
            else:
                input_data = {
                    'bathrooms': bathrooms_input, 'pais': pais_input, 'host_id': host_id_input,
                    'bedrooms': bedrooms_input, 'reviews': reviews_input, 'beds': beds_input,
                    'sector': sector_input, 'guests': guests_input,
                    'checkin_category': checkin_input, 'checkout_category': checkout_input,
                    'rating': rating_input, 'toiles': toiles_input, 'studios': studios_input
                }
                
                input_df = pd.DataFrame([input_data])
                try:
                    prediccion = modelo.predict(input_df)[0]
                    st.success(f"**Precio Estimado por Noche: COP {prediccion:,.2f}**")
                    st.session_state.precio_base_simulacion = prediccion
                    st.session_state.property_base_simulacion = input_data.copy()
                except Exception as e:
                    st.error(f"Error al predecir: {e}")
                    st.error("Aseg√∫rate de que todas las caracter√≠sticas necesarias por el modelo est√©n presentes y con los tipos de datos correctos.")
                    st.dataframe(input_df)
        else:
            st.warning("El modelo no est√° cargado. No se puede predecir.")

with col_importance:
    st.subheader("Importancia de las Caracter√≠sticas")
    st.markdown("Visualizaci√≥n de c√≥mo cada caracter√≠stica influye en la predicci√≥n del precio, seg√∫n el modelo.")
    data_importancia_agrupada = {
        'Original_Column': ['bathrooms', 'pais', 'host_id', 'bedrooms', 'reviews', 'beds', 'sector', 'guests', 'checkin_category', 'checkout_category', 'rating', 'toiles', 'studios'],
        'Importance': [0.257116, 0.191497, 0.122024, 0.111934, 0.103072, 0.075089, 0.057227, 0.033455, 0.019237, 0.017591, 0.007317, 0.004440, 0.000000]
    }
    df_importancia = pd.DataFrame(data_importancia_agrupada).sort_values(by="Importance", ascending=False)
    
    fig_importancia = px.bar(df_importancia, x="Importance", y="Original_Column", orientation='h',
                             title="Importancia de Caracter√≠sticas en el Modelo",
                             labels={'Importance': 'Importancia Relativa', 'Original_Column': 'Caracter√≠stica'},
                             color="Importance", color_continuous_scale=px.colors.sequential.Viridis)
    fig_importancia.update_layout(yaxis={'categoryorder':'total ascending'})
    st.plotly_chart(fig_importancia, use_container_width=True)

st.markdown("---")

# --- Secci√≥n de Simulaci√≥n de Mejoras y Rentabilidad ---
st.header("üõ†Ô∏è Simulaci√≥n de Mejoras y C√°lculo de Rentabilidad")
st.markdown("""
Aqu√≠ puedes simular c√≥mo ciertas mejoras a la propiedad (utilizando la configuraci√≥n de la secci√≥n de predicci√≥n interactiva como base)
podr√≠an afectar el precio por noche y, consecuentemente, la rentabilidad de la inversi√≥n.
Ingresa los costos asociados para realizar el c√°lculo.
""")

if 'property_base_simulacion' not in st.session_state or 'precio_base_simulacion' not in st.session_state:
    st.warning("Primero realiza una predicci√≥n en la secci√≥n 'Simula el Precio de una Propiedad' para activar esta simulaci√≥n.")
else:
    property_base_actual = st.session_state.property_base_simulacion
    price_base_actual = st.session_state.precio_base_simulacion
    st.info(f"Simulaci√≥n basada en la propiedad con precio predicho de: **COP {price_base_actual:,.2f}**")

    expander_costos = st.expander("Configurar Costos de Inversi√≥n y Operaci√≥n", expanded=True)
    with expander_costos:
        c_cost1, c_cost2, c_cost3 = st.columns(3)
        property_cost_input = c_cost1.number_input("Costo de Compra/Valor de la Propiedad (COP)", min_value=0, value=200000000, step=1000000)
        cost_bathroom_input = c_cost2.number_input("Costo de A√±adir 1 Ba√±o (COP)", min_value=0, value=15000000, step=500000)
        cost_bedroom_input = c_cost3.number_input("Costo de A√±adir 1 Habitaci√≥n (COP)", min_value=0, value=25000000, step=500000)
        c_op1, c_op2 = st.columns(2)
        occupancy_rate_input = c_op1.slider("Tasa de Ocupaci√≥n Anual Estimada (%)", 0.0, 100.0, 70.0, 1.0) / 100.0
        operational_cost_rate_input = c_op2.slider("Costos Operativos Anuales (% de Ingresos)", 0.0, 100.0, 20.0, 1.0) / 100.0

    if st.button("üè¶ Calcular Rentabilidad de Escenarios", key="calculate_roi", use_container_width=True):
        if modelo:
            base_df_sim = pd.DataFrame([property_base_actual])

            # Escenarios de mejora
            property_plus_bathroom_sim = property_base_actual.copy()
            property_plus_bathroom_sim['bathrooms'] = property_base_actual.get('bathrooms', 1) + 1
            X_plus_bathroom = pd.DataFrame([property_plus_bathroom_sim])

            property_plus_bedroom_sim = property_base_actual.copy()
            property_plus_bedroom_sim['bedrooms'] = property_base_actual.get('bedrooms', 1) + 1
            X_plus_bedroom = pd.DataFrame([property_plus_bedroom_sim])

            property_plus_both_sim = property_base_actual.copy()
            property_plus_both_sim['bathrooms'] = property_base_actual.get('bathrooms', 1) + 1
            property_plus_both_sim['bedrooms'] = property_base_actual.get('bedrooms', 1) + 1
            X_plus_both = pd.DataFrame([property_plus_both_sim])
            
            try:
                price_plus_bathroom_pred = modelo.predict(X_plus_bathroom)[0] * 2  # Multiplicador seg√∫n ejemplo
                price_plus_bedroom_pred = modelo.predict(X_plus_bedroom)[0] * 1.5  # Multiplicador seg√∫n ejemplo
                price_plus_both_pred = modelo.predict(X_plus_both)[0] * 2.5  # Multiplicador seg√∫n ejemplo

                price_base_final = price_base_actual
                price_plus_bathroom_final = price_plus_bathroom_pred
                price_plus_bedroom_final = price_plus_bedroom_pred
                price_plus_both_final = price_plus_both_pred

                nights_per_year = 365 * occupancy_rate_input
                scenarios_data = [
                    {'name': 'Propiedad Base', 'price_per_night': price_base_final, 'remodeling_cost': 0},
                    {'name': 'M√°s 1 Ba√±o', 'price_per_night': price_plus_bathroom_final, 'remodeling_cost': cost_bathroom_input},
                    {'name': 'M√°s 1 Habitaci√≥n', 'price_per_night': price_plus_bedroom_final, 'remodeling_cost': cost_bedroom_input},
                    {'name': 'M√°s 1 Ba√±o y 1 Habitaci√≥n', 'price_per_night': price_plus_both_final, 'remodeling_cost': cost_bathroom_input + cost_bedroom_input}
                ]
                results_list = []
                for scenario in scenarios_data:
                    income = scenario['price_per_night'] * nights_per_year
                    operational_cost = income * operational_cost_rate_input
                    ganancia_neta_anual = income - operational_cost
                    costo_inversion_total = property_cost_input + scenario['remodeling_cost']
                    roi = (ganancia_neta_anual / costo_inversion_total) * 100 if costo_inversion_total > 0 else 0
                    results_list.append({
                        'Escenario': scenario['name'],
                        'Precio por Noche (COP)': scenario['price_per_night'],
                        'Costo Remodelaci√≥n (COP)': scenario['remodeling_cost'],
                        'Ingreso Anual Bruto (COP)': income,
                        'Costo Operativo Anual (COP)': operational_cost,
                        'Utilidad Anual (COP)': ganancia_neta_anual,
                        'Inversi√≥n Total (COP)': costo_inversion_total,
                        'ROI (%)': roi
                    })
                results_df = pd.DataFrame(results_list)
                st.subheader("Resultados de Simulaci√≥n y Rentabilidad")
                currency_cols = ['Precio por Noche (COP)', 'Costo Remodelaci√≥n (COP)', 'Ingreso Anual Bruto (COP)', 'Costo Operativo Anual (COP)', 'Utilidad Anual (COP)', 'Inversi√≥n Total (COP)']
                for col_curr in currency_cols:
                    results_df[col_curr] = results_df[col_curr].apply(lambda x: f"COP {x:,.2f}")
                results_df['ROI (%)'] = results_df['ROI (%)'].apply(lambda x: f"{x:.2f}%")
                st.dataframe(results_df, use_container_width=True)

                results_df_numeric = pd.DataFrame(results_list)
                col_chart1, col_chart2 = st.columns(2)
                with col_chart1:
                    fig_precios = px.bar(results_df_numeric, x='Escenario', y='Precio por Noche (COP)',
                                        title='Precio por Noche Predicho por Escenario',
                                        labels={'Precio por Noche (COP)': 'Precio por Noche (COP)', 'Escenario': 'Escenario'},
                                        color='Escenario', text_auto='.2s')
                    fig_precios.update_layout(xaxis_tickangle=-45)
                    st.plotly_chart(fig_precios, use_container_width=True)
                with col_chart2:
                    fig_roi = px.bar(results_df_numeric, x='Escenario', y='ROI (%)',
                                    title='Retorno sobre la Inversi√≥n (ROI) por Escenario',
                                    labels={'ROI (%)': 'ROI Anual (%)', 'Escenario': 'Escenario'},
                                    color='Escenario', text_auto='.2f')
                    fig_roi.update_layout(xaxis_tickangle=-45)
                    st.plotly_chart(fig_roi, use_container_width=True)
                st.info("""
                **Nota sobre los multiplicadores de precio:**
                Los precios predichos para los escenarios de mejora han sido ajustados con multiplicadores (2x para ba√±o, 1.5x para habitaci√≥n, 2.5x para ambos) seg√∫n el ejemplo proporcionado, para reflejar un incremento notable en el precio por noche.
                """)
            except Exception as e:
                st.error(f"Error durante la simulaci√≥n de escenarios: {e}")
        else:
            st.warning("El modelo no est√° cargado.")

# --- Pie de P√°gina ---
st.markdown("---")
st.markdown("Dashboard POC desarrollado con Streamlit. Modelo de Regresi√≥n de Precios Airbnb.")
